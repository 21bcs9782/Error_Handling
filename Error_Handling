// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract AssertionExample {
    function assertStatement(uint a, uint b) public pure returns (uint) {
        // `assert` checks for conditions that should never be possible.
        // If the condition evaluates to false, it indicates a bug in the code,
        // and the transaction is reverted.
        assert(a != 0 && b != 0);
        
        uint result = a / b;
        return result;
    }
    
    function revertStatement(uint256 a, uint256 b) public pure returns (uint) {
        // `revert` is used to explicitly revert the transaction execution,
        // typically due to invalid conditions or invalid inputs.
        if (a == 0 || b == 0) {
            revert("Cannot divide by zero.");
        }
        
        uint result = a / b;
        return result;
    }
    
    function requireStatement(uint a, uint b) external pure returns (uint) {
        // `require` is used to validate inputs or conditions, and if they
        // evaluate to false, the transaction is reverted.
        require(a != 0 && b != 0, "Inputs must be non-zero.");
        
        uint result = a / b;
        return result;
    }
}
